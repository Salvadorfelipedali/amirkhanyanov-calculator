import { useMemo } from 'react';

export interface ProfitInputs {
  leadsPerMonth: number; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –≤ –º–µ—Å—è—Ü
  conversionRate: number; // –∫–æ–Ω–≤–µ—Ä—Å–∏—è (%)
  averageCheck: number; // —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ (—Ä—É–±.)
  profitMargin: number; // —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)
}

export interface Boosters {
  trafficSource: boolean; // +40% –∫ –∑–∞—è–≤–∫–∞–º
  leadRub: boolean; // +20% –∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  focusOnOne: boolean; // +15% –∫ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
  salesScripts: boolean; // +25% –∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  aiAnalyzer: boolean; // +10% –∫ –∑–∞—è–≤–∫–∞–º –∏ +10% –∫ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
}

export interface EntrepreneurLevel {
  name: string;
  description: string;
  range: [number, number];
  icon: string;
}

const ENTREPRENEUR_LEVELS: EntrepreneurLevel[] = [
  {
    name: '–°—Ç–∞–∂—ë—Ä –±–∏–∑–Ω–µ—Å–∞',
    description: '–£—á–∏—à—å—Å—è —Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —Ä–µ–ª—å—Å—ã',
    range: [200_000, 400_000],
    icon: 'üéì'
  },
  {
    name: '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Å–¥–µ–ª–∫–∞–º–∏',
    description: '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å –ª–∏–¥–æ–≤ –∏ –¥–µ—Ä–∂–∏—à—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é',
    range: [400_000, 800_000],
    icon: 'üéØ'
  },
  {
    name: '–ò–≥—Ä–æ–∫ —Ä—ã–Ω–∫–∞',
    description: '–í—ã—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂ –∏ –ø–æ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤',
    range: [800_000, 1_500_000],
    icon: 'üèÜ'
  },
  {
    name: '–ú–∞–≥–Ω–∞—Ç –Ω–∏—à–∏',
    description: '–î–æ–º–∏–Ω–∏—Ä—É–µ—à—å –Ω–∞ —Å–≤–æ—ë–º —Ä—ã–Ω–∫–µ',
    range: [1_500_000, 3_000_000],
    icon: 'üëë'
  },
  {
    name: '–ê–ª—å—Ñ–∞-–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
    description: '–°—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ª–µ–≥–µ–Ω–¥–æ–π',
    range: [3_000_000, Infinity],
    icon: '‚ö°'
  }
];

export const useProfitCalculator = (inputs: ProfitInputs, boosters: Boosters) => {
  // –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å –ë–ï–ó –±—É—Å—Ç–µ—Ä–æ–≤ (–±–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞)
  const currentProfit = useMemo(() => {
    const profit = inputs.leadsPerMonth * (inputs.conversionRate / 100) * inputs.averageCheck * (inputs.profitMargin / 100);
    return Math.round(profit);
  }, [inputs.leadsPerMonth, inputs.conversionRate, inputs.averageCheck, inputs.profitMargin]);

  // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –° –£–ß–ï–¢–û–ú –±—É—Å—Ç–µ—Ä–æ–≤
  const potentialProfit = useMemo(() => {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±—É—Å—Ç–µ—Ä—ã –∫ –±–∞–∑–æ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º –°–ù–ê–ß–ê–õ–ê
    let boostedLeads = inputs.leadsPerMonth;
    let boostedConversion = inputs.conversionRate;
    let boostedMargin = inputs.profitMargin;

    // –ë—É—Å—Ç–µ—Ä—ã –¥–ª—è –∑–∞—è–≤–æ–∫
    if (boosters.trafficSource) {
      boostedLeads *= 1.4; // +40%
    }
    if (boosters.aiAnalyzer) {
      boostedLeads *= 1.1; // +10%
    }

    // –ë—É—Å—Ç–µ—Ä—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    if (boosters.leadRub) {
      boostedConversion = Math.min(boostedConversion * 1.2, 80); // +20%, –º–∞–∫—Å 80%
    }
    if (boosters.salesScripts) {
      boostedConversion = Math.min(boostedConversion * 1.25, 80); // +25%, –º–∞–∫—Å 80%
    }

    // –ë—É—Å—Ç–µ—Ä—ã –¥–ª—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    if (boosters.focusOnOne) {
      boostedMargin = Math.min(boostedMargin * 1.15, 80); // +15%, –º–∞–∫—Å 80%
    }
    if (boosters.aiAnalyzer) {
      boostedMargin = Math.min(boostedMargin * 1.1, 80); // +10%, –º–∞–∫—Å 80%
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å —Å —É—á—ë—Ç–æ–º –±—É—Å—Ç–µ—Ä–æ–≤
    const boostedBaseProfit = boostedLeads * (boostedConversion / 100) * inputs.averageCheck * (boostedMargin / 100);
    
    // –ó–ê–¢–ï–ú –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥-—ç—Ñ—Ñ–µ–∫—Ç –∫ —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
    // –ï—Å–ª–∏ –Ω–µ—Ç –±—É—Å—Ç–µ—Ä–æ–≤ - –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –±–∞–∑–æ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏
    const hasActiveBoosters = Object.values(boosters).some(Boolean);
    const baseForMastermind = hasActiveBoosters ? boostedBaseProfit : currentProfit;
    
    // –ú–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥ –¥–∞—ë—Ç —Ä–æ—Å—Ç 204% (–∏—Ç–æ–≥–æ x3.04)
    const finalPotentialProfit = baseForMastermind * 3.04;
    
    return Math.round(Math.max(finalPotentialProfit, currentProfit)); // –ú–∏–Ω–∏–º—É–º = —Ç–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å
  }, [inputs, boosters, currentProfit]);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è
  const entrepreneurLevel = useMemo(() => {
    for (const level of ENTREPRENEUR_LEVELS) {
      if (potentialProfit >= level.range[0] && potentialProfit < level.range[1]) {
        return level;
      }
    }
    return ENTREPRENEUR_LEVELS[ENTREPRENEUR_LEVELS.length - 1]; // –ê–ª—å—Ñ–∞-–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å
  }, [potentialProfit]);

  // –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞
  const growthPercentage = useMemo(() => {
    if (currentProfit === 0) return 204;
    const growth = ((potentialProfit - currentProfit) / currentProfit) * 100;
    return Math.round(Math.max(growth, 0)); // –º–∏–Ω–∏–º—É–º 0%
  }, [currentProfit, potentialProfit]);

  return {
    currentProfit,
    potentialProfit,
    entrepreneurLevel,
    growthPercentage,
    ENTREPRENEUR_LEVELS
  };
};